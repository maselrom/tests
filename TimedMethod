package com.javarush.test.polindromTest.TimedMethod;


import java.util.*;

/**
 * Created by roman_ma on 05.07.2016.
 */
public class Main
{
    public static final int COUNT = 3;
    public static final long PERIOD = 1_000;
    private static LinkedList<Long> callList = new LinkedList<Long>();

    public static void main(String[] args) throws InterruptedException
    {
        int res = 0;
        int trys = 0;
        Date start = new Date();
        for (int i = 0; i < 30; i++)
        {
            if (timedMethod())
            {
                res++;
            }
            trys++;
            Thread.sleep(100);
        }
        System.out.println(trys + " // " + res + " time elapsed: " + (new Date().getTime() - start.getTime()));
        res = 0;
        trys = 0;
        start = new Date();
        for (int i = 0; i < 300; i++)
        {
            if (timedMethod())
            {
                res++;
            }
            trys++;

            Thread.sleep(10);
        }
        System.out.println(trys + " // " + res + " time elapsed: " + (new Date().getTime() - start.getTime()));
    }

    private static boolean timedMethod()
    {
        long res = 0;
        Iterator it = callList.descendingIterator();
        int i = 0;
        long curtime = new Date().getTime();
        while (it.hasNext())
        {
            if ((long) it.next() > (curtime - PERIOD))
            {
                i++;
                if (i >= COUNT)
                {
                    callList.add(new Date().getTime());
                    return false;
                }
            }
            else {
                callList.add(new Date().getTime());
                return true;
            }
        }
        callList.add(new Date().getTime());
        return true;
    }


}
